diff --git Zend/zend_language_parser.y Zend/zend_language_parser.y
index 95823ae750..25f45b8988 100644
--- Zend/zend_language_parser.y
+++ Zend/zend_language_parser.y
@@ -44,6 +44,7 @@ static YYSIZE_T zend_yytnamerr(char*, const char*);
 
 %pure-parser
 %expect 0
+%define parse.error verbose
 
 %code requires {
 }
diff --git acinclude.m4 acinclude.m4
index e1e272fa24..1484b8c87b 100644
--- acinclude.m4
+++ acinclude.m4
@@ -2125,7 +2125,7 @@ dnl
 dnl Search for bison and check it's version
 dnl
 AC_DEFUN([PHP_PROG_BISON], [
-  AC_PROG_YACC
+  AC_CHECK_PROG(YACC, bison, bison)
   LIBZEND_BISON_CHECK
   PHP_SUBST(YACC)
 ])
diff --git build/pkg.m4 build/pkg.m4
new file mode 100644
index 0000000000..f9075e56c8
--- /dev/null
+++ build/pkg.m4
@@ -0,0 +1,275 @@
+# pkg.m4 - Macros to locate and utilise pkg-config.   -*- Autoconf -*-
+# serial 12 (pkg-config-0.29.2)
+
+dnl Copyright © 2004 Scott James Remnant <scott@netsplit.com>.
+dnl Copyright © 2012-2015 Dan Nicholson <dbn.lists@gmail.com>
+dnl
+dnl This program is free software; you can redistribute it and/or modify
+dnl it under the terms of the GNU General Public License as published by
+dnl the Free Software Foundation; either version 2 of the License, or
+dnl (at your option) any later version.
+dnl
+dnl This program is distributed in the hope that it will be useful, but
+dnl WITHOUT ANY WARRANTY; without even the implied warranty of
+dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+dnl General Public License for more details.
+dnl
+dnl You should have received a copy of the GNU General Public License
+dnl along with this program; if not, write to the Free Software
+dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+dnl 02111-1307, USA.
+dnl
+dnl As a special exception to the GNU General Public License, if you
+dnl distribute this file as part of a program that contains a
+dnl configuration script generated by Autoconf, you may include it under
+dnl the same distribution terms that you use for the rest of that
+dnl program.
+
+dnl PKG_PREREQ(MIN-VERSION)
+dnl -----------------------
+dnl Since: 0.29
+dnl
+dnl Verify that the version of the pkg-config macros are at least
+dnl MIN-VERSION. Unlike PKG_PROG_PKG_CONFIG, which checks the user's
+dnl installed version of pkg-config, this checks the developer's version
+dnl of pkg.m4 when generating configure.
+dnl
+dnl To ensure that this macro is defined, also add:
+dnl m4_ifndef([PKG_PREREQ],
+dnl     [m4_fatal([must install pkg-config 0.29 or later before running autoconf/autogen])])
+dnl
+dnl See the "Since" comment for each macro you use to see what version
+dnl of the macros you require.
+m4_defun([PKG_PREREQ],
+[m4_define([PKG_MACROS_VERSION], [0.29.2])
+m4_if(m4_version_compare(PKG_MACROS_VERSION, [$1]), -1,
+    [m4_fatal([pkg.m4 version $1 or higher is required but ]PKG_MACROS_VERSION[ found])])
+])dnl PKG_PREREQ
+
+dnl PKG_PROG_PKG_CONFIG([MIN-VERSION])
+dnl ----------------------------------
+dnl Since: 0.16
+dnl
+dnl Search for the pkg-config tool and set the PKG_CONFIG variable to
+dnl first found in the path. Checks that the version of pkg-config found
+dnl is at least MIN-VERSION. If MIN-VERSION is not specified, 0.9.0 is
+dnl used since that's the first version where most current features of
+dnl pkg-config existed.
+AC_DEFUN([PKG_PROG_PKG_CONFIG],
+[m4_pattern_forbid([^_?PKG_[A-Z_]+$])
+m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])
+m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])
+AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])
+AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])
+AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])
+
+if test "x$ac_cv_env_PKG_CONFIG_set" != "xset"; then
+	AC_PATH_TOOL([PKG_CONFIG], [pkg-config])
+fi
+if test -n "$PKG_CONFIG"; then
+	_pkg_min_version=m4_default([$1], [0.9.0])
+	AC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])
+	if $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then
+		AC_MSG_RESULT([yes])
+	else
+		AC_MSG_RESULT([no])
+		PKG_CONFIG=""
+	fi
+fi[]dnl
+])dnl PKG_PROG_PKG_CONFIG
+
+dnl PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
+dnl -------------------------------------------------------------------
+dnl Since: 0.18
+dnl
+dnl Check to see whether a particular set of modules exists. Similar to
+dnl PKG_CHECK_MODULES(), but does not set variables or print errors.
+dnl
+dnl Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])
+dnl only at the first occurrence in configure.ac, so if the first place
+dnl it's called might be skipped (such as if it is within an "if", you
+dnl have to call PKG_CHECK_EXISTS manually
+AC_DEFUN([PKG_CHECK_EXISTS],
+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
+if test -n "$PKG_CONFIG" && \
+    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors "$1"]); then
+  m4_default([$2], [:])
+m4_ifvaln([$3], [else
+  $3])dnl
+fi])
+
+dnl _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])
+dnl ---------------------------------------------
+dnl Internal wrapper calling pkg-config via PKG_CONFIG and setting
+dnl pkg_failed based on the result.
+m4_define([_PKG_CONFIG],
+[if test -n "$$1"; then
+    pkg_cv_[]$1="$$1"
+ elif test -n "$PKG_CONFIG"; then
+    PKG_CHECK_EXISTS([$3],
+                     [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 "$3" 2>/dev/null`
+		      test "x$?" != "x0" && pkg_failed=yes ],
+		     [pkg_failed=yes])
+ else
+    pkg_failed=untried
+fi[]dnl
+])dnl _PKG_CONFIG
+
+dnl _PKG_SHORT_ERRORS_SUPPORTED
+dnl ---------------------------
+dnl Internal check to see if pkg-config supports short errors.
+AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],
+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])
+if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
+        _pkg_short_errors_supported=yes
+else
+        _pkg_short_errors_supported=no
+fi[]dnl
+])dnl _PKG_SHORT_ERRORS_SUPPORTED
+
+
+dnl PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],
+dnl   [ACTION-IF-NOT-FOUND])
+dnl --------------------------------------------------------------
+dnl Since: 0.4.0
+dnl
+dnl Note that if there is a possibility the first call to
+dnl PKG_CHECK_MODULES might not happen, you should be sure to include an
+dnl explicit call to PKG_PROG_PKG_CONFIG in your configure.ac
+AC_DEFUN([PKG_CHECK_MODULES],
+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
+AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl
+AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl
+
+pkg_failed=no
+AC_MSG_CHECKING([for $2])
+
+_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])
+_PKG_CONFIG([$1][_LIBS], [libs], [$2])
+
+m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS
+and $1[]_LIBS to avoid the need to call pkg-config.
+See the pkg-config man page for more details.])
+
+if test $pkg_failed = yes; then
+        AC_MSG_RESULT([no])
+        _PKG_SHORT_ERRORS_SUPPORTED
+        if test $_pkg_short_errors_supported = yes; then
+	        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs "$2" 2>&1`
+        else
+	        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs "$2" 2>&1`
+        fi
+	# Put the nasty error message in config.log where it belongs
+	echo "$$1[]_PKG_ERRORS" >&AS_MESSAGE_LOG_FD
+
+	m4_default([$4], [AC_MSG_ERROR(
+[Package requirements ($2) were not met:
+
+$$1_PKG_ERRORS
+
+Consider adjusting the PKG_CONFIG_PATH environment variable if you
+installed software in a non-standard prefix.
+
+_PKG_TEXT])[]dnl
+        ])
+elif test $pkg_failed = untried; then
+        AC_MSG_RESULT([no])
+	m4_default([$4], [AC_MSG_FAILURE(
+[The pkg-config script could not be found or is too old.  Make sure it
+is in your PATH or set the PKG_CONFIG environment variable to the full
+path to pkg-config.
+
+_PKG_TEXT
+
+To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl
+        ])
+else
+	$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS
+	$1[]_LIBS=$pkg_cv_[]$1[]_LIBS
+        AC_MSG_RESULT([yes])
+	$3
+fi[]dnl
+])dnl PKG_CHECK_MODULES
+
+
+dnl PKG_CHECK_MODULES_STATIC(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],
+dnl   [ACTION-IF-NOT-FOUND])
+dnl ---------------------------------------------------------------------
+dnl Since: 0.29
+dnl
+dnl Checks for existence of MODULES and gathers its build flags with
+dnl static libraries enabled. Sets VARIABLE-PREFIX_CFLAGS from --cflags
+dnl and VARIABLE-PREFIX_LIBS from --libs.
+dnl
+dnl Note that if there is a possibility the first call to
+dnl PKG_CHECK_MODULES_STATIC might not happen, you should be sure to
+dnl include an explicit call to PKG_PROG_PKG_CONFIG in your
+dnl configure.ac.
+AC_DEFUN([PKG_CHECK_MODULES_STATIC],
+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
+_save_PKG_CONFIG=$PKG_CONFIG
+PKG_CONFIG="$PKG_CONFIG --static"
+PKG_CHECK_MODULES($@)
+PKG_CONFIG=$_save_PKG_CONFIG[]dnl
+])dnl PKG_CHECK_MODULES_STATIC
+
+
+dnl PKG_INSTALLDIR([DIRECTORY])
+dnl -------------------------
+dnl Since: 0.27
+dnl
+dnl Substitutes the variable pkgconfigdir as the location where a module
+dnl should install pkg-config .pc files. By default the directory is
+dnl $libdir/pkgconfig, but the default can be changed by passing
+dnl DIRECTORY. The user can override through the --with-pkgconfigdir
+dnl parameter.
+AC_DEFUN([PKG_INSTALLDIR],
+[m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])
+m4_pushdef([pkg_description],
+    [pkg-config installation directory @<:@]pkg_default[@:>@])
+AC_ARG_WITH([pkgconfigdir],
+    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,
+    [with_pkgconfigdir=]pkg_default)
+AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])
+m4_popdef([pkg_default])
+m4_popdef([pkg_description])
+])dnl PKG_INSTALLDIR
+
+
+dnl PKG_NOARCH_INSTALLDIR([DIRECTORY])
+dnl --------------------------------
+dnl Since: 0.27
+dnl
+dnl Substitutes the variable noarch_pkgconfigdir as the location where a
+dnl module should install arch-independent pkg-config .pc files. By
+dnl default the directory is $datadir/pkgconfig, but the default can be
+dnl changed by passing DIRECTORY. The user can override through the
+dnl --with-noarch-pkgconfigdir parameter.
+AC_DEFUN([PKG_NOARCH_INSTALLDIR],
+[m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])
+m4_pushdef([pkg_description],
+    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])
+AC_ARG_WITH([noarch-pkgconfigdir],
+    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,
+    [with_noarch_pkgconfigdir=]pkg_default)
+AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])
+m4_popdef([pkg_default])
+m4_popdef([pkg_description])
+])dnl PKG_NOARCH_INSTALLDIR
+
+
+dnl PKG_CHECK_VAR(VARIABLE, MODULE, CONFIG-VARIABLE,
+dnl [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
+dnl -------------------------------------------
+dnl Since: 0.28
+dnl
+dnl Retrieves the value of the pkg-config variable for the given module.
+AC_DEFUN([PKG_CHECK_VAR],
+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
+AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl
+
+_PKG_CONFIG([$1], [variable="][$3]["], [$2])
+AS_VAR_COPY([$1], [pkg_cv_][$1])
+
+AS_VAR_IF([$1], [""], [$5], [$4])dnl
+])dnl PKG_CHECK_VAR
diff --git configure.ac configure.ac
index 3815cb54bc..f59f3befc7 100644
--- configure.ac
+++ configure.ac
@@ -1,6 +1,12 @@
 ## -*- autoconf -*-
 dnl ## Process this file with autoconf to produce a configure script.
 
+dnl Include external macro definitions before the AC_INIT to also remove
+dnl comments starting with # and empty newlines from the included files.
+dnl ----------------------------------------------------------------------------
+m4_include([build/pkg.m4])
+
+
 dnl include Zend specific macro definitions first
 dnl -------------------------------------------------------------------------
 sinclude(Zend/acinclude.m4)
diff --git ext/gd/config.m4 ext/gd/config.m4
index 498d870785..e8bcab37b8 100644
--- ext/gd/config.m4
+++ ext/gd/config.m4
@@ -1,216 +1,121 @@
-dnl config.m4 for extension gd
-
 dnl
 dnl Configure options
 dnl
-
-PHP_ARG_WITH(gd, for GD support,
-[  --with-gd[=DIR]           Include GD support.  DIR is the GD library base
-                          install directory [BUNDLED]])
-if test -z "$PHP_WEBP_DIR"; then
-  PHP_ARG_WITH(webp-dir, for the location of libwebp,
-  [  --with-webp-dir[=DIR]     GD: Set the path to libwebp install prefix], no, no)
-fi
-
-if test -z "$PHP_JPEG_DIR"; then
-  PHP_ARG_WITH(jpeg-dir, for the location of libjpeg,
-  [  --with-jpeg-dir[=DIR]     GD: Set the path to libjpeg install prefix], no, no)
-fi
-
-if test -z "$PHP_PNG_DIR"; then
-  PHP_ARG_WITH(png-dir, for the location of libpng,
-  [  --with-png-dir[=DIR]      GD: Set the path to libpng install prefix], no, no)
+PHP_ARG_ENABLE([gd],
+  [for GD support],
+  [AS_HELP_STRING([--enable-gd],
+    [Include GD support])])
+
+PHP_ARG_WITH([external-gd],
+  [for external libgd],
+  [AS_HELP_STRING([--with-external-gd],
+    [Use external libgd])],
+  [no],
+  [no])
+
+if test -z "$PHP_WEBP"; then
+  PHP_ARG_WITH([webp],
+    [for libwebp],
+    [AS_HELP_STRING([--with-webp],
+      [GD: Enable WEBP support (only for bundled libgd)])],
+    [no],
+    [no])
 fi
 
-if test -z "$PHP_ZLIB_DIR"; then
-  PHP_ARG_WITH(zlib-dir, for the location of libz,
-  [  --with-zlib-dir[=DIR]     GD: Set the path to libz install prefix], no, no)
+if test -z "$PHP_JPEG"; then
+  PHP_ARG_WITH([jpeg],
+    [for libjpeg],
+    [AS_HELP_STRING([--with-jpeg],
+      [GD: Enable JPEG support (only for bundled libgd)])],
+    [no],
+    [no])
 fi
 
-PHP_ARG_WITH(xpm-dir, for the location of libXpm,
-[  --with-xpm-dir[=DIR]      GD: Set the path to libXpm install prefix], no, no)
-
-PHP_ARG_WITH(freetype-dir, for FreeType 2,
-[  --with-freetype-dir[=DIR] GD: Set the path to FreeType 2 install prefix], no, no)
-
-PHP_ARG_ENABLE(gd-jis-conv, whether to enable JIS-mapped Japanese font support in GD,
-[  --enable-gd-jis-conv    GD: Enable JIS-mapped Japanese font support], no, no)
+PHP_ARG_WITH([xpm],
+  [for libXpm],
+  [AS_HELP_STRING([--with-xpm],
+    [GD: Enable XPM support  (only for bundled libgd)])],
+  [no],
+  [no])
+
+PHP_ARG_WITH([freetype],
+  [for FreeType 2],
+  [AS_HELP_STRING([--with-freetype],
+    [GD: Enable FreeType 2 support (only for bundled libgd)])],
+  [no],
+  [no])
+
+PHP_ARG_ENABLE([gd-jis-conv],
+  [whether to enable JIS-mapped Japanese font support in GD],
+  [AS_HELP_STRING([--enable-gd-jis-conv],
+    [GD: Enable JIS-mapped Japanese font support (only for bundled libgd)])],
+  [no],
+  [no])
 
 dnl
 dnl Checks for the configure options
 dnl
 
+dnl zlib is always required
 AC_DEFUN([PHP_GD_ZLIB],[
-	if test "$PHP_ZLIB_DIR" != "no" && test "$PHP_ZLIB_DIR" != "yes"; then
-		if test -f "$PHP_ZLIB_DIR/include/zlib/zlib.h"; then
-			PHP_ZLIB_DIR="$PHP_ZLIB_DIR"
-			PHP_ZLIB_INCDIR="$PHP_ZLIB_DIR/include/zlib"
-		elif test -f "$PHP_ZLIB_DIR/include/zlib.h"; then
-			PHP_ZLIB_DIR="$PHP_ZLIB_DIR"
-			PHP_ZLIB_INCDIR="$PHP_ZLIB_DIR/include"
-		else
-			AC_MSG_ERROR([Can't find zlib headers under "$PHP_ZLIB_DIR"])
-		fi
-	else
-		for i in /usr/local /usr; do
-			if test -f "$i/include/zlib/zlib.h"; then
-				PHP_ZLIB_DIR="$i"
-				PHP_ZLIB_INCDIR="$i/include/zlib"
-			elif test -f "$i/include/zlib.h"; then
-				PHP_ZLIB_DIR="$i"
-				PHP_ZLIB_INCDIR="$i/include"
-			fi
-		done
-	fi
+  PKG_CHECK_MODULES([ZLIB], [zlib])
+  PHP_EVAL_LIBLINE($ZLIB_LIBS, GD_SHARED_LIBADD)
+  PHP_EVAL_INCLINE($ZLIB_CFLAGS)
 ])
 
-AC_DEFUN([PHP_GD_WEBP],[
-  if test "$PHP_WEBP_DIR" != "no"; then
-
-    for i in $PHP_WEBP_DIR /usr/local /usr; do
-      test -f $i/include/webp/decode.h && GD_WEBP_DIR=$i && break
-    done
-
-    if test -z "$GD_WEBP_DIR"; then
-      AC_MSG_ERROR([webp/decode.h not found.])
-    fi
-
-    for i in $PHP_WEBP_DIR /usr/local /usr; do
-      test -f $i/include/webp/encode.h && GD_WEBP_DIR=$i && break
-    done
-
-    if test -z "$GD_WEBP_DIR"; then
-      AC_MSG_ERROR([webp/encode.h not found.])
-    fi
-
-    PHP_CHECK_LIBRARY(webp,WebPGetInfo,
-    [
-      PHP_ADD_INCLUDE($GD_WEBP_DIR/include)
-      PHP_ADD_LIBRARY(pthread)
-      PHP_ADD_LIBRARY_WITH_PATH(webp, $GD_WEBP_DIR/$PHP_LIBDIR, GD_SHARED_LIBADD)
-    ],[
-      AC_MSG_ERROR([Problem with libwebp.(a|so). Please check config.log for more information.])
-    ],[
-      -L$GD_WEBP_DIR/$PHP_LIBDIR
-    ])
-  else
-    AC_MSG_RESULT([If configure fails try --with-webp-dir=<DIR>])
-  fi
+dnl libpng is always required
+AC_DEFUN([PHP_GD_PNG],[
+  PKG_CHECK_MODULES([PNG], [libpng])
+  PHP_EVAL_LIBLINE($PNG_LIBS, GD_SHARED_LIBADD)
+  PHP_EVAL_INCLINE($PNG_CFLAGS)
+  AC_DEFINE(HAVE_LIBPNG, 1, [ ])
 ])
 
-AC_DEFUN([PHP_GD_JPEG],[
-  if test "$PHP_JPEG_DIR" != "no"; then
-
-    for i in $PHP_JPEG_DIR /usr/local /usr; do
-      test -f $i/include/jpeglib.h && GD_JPEG_DIR=$i && break
-    done
-
-    if test -z "$GD_JPEG_DIR"; then
-      AC_MSG_ERROR([jpeglib.h not found.])
-    fi
-
-    PHP_CHECK_LIBRARY(jpeg,jpeg_read_header,
-    [
-      PHP_ADD_INCLUDE($GD_JPEG_DIR/include)
-      PHP_ADD_LIBRARY_WITH_PATH(jpeg, $GD_JPEG_DIR/$PHP_LIBDIR, GD_SHARED_LIBADD)
-    ],[
-      AC_MSG_ERROR([Problem with libjpeg.(a|so). Please check config.log for more information.])
-    ],[
-      -L$GD_JPEG_DIR/$PHP_LIBDIR
-    ])
-  else
-    AC_MSG_RESULT([If configure fails try --with-jpeg-dir=<DIR>])
+AC_DEFUN([PHP_GD_WEBP],[
+  if test "$PHP_WEBP" != "no"; then
+    PKG_CHECK_MODULES([WEBP], [libwebp])
+    PHP_EVAL_LIBLINE($WEBP_LIBS, GD_SHARED_LIBADD)
+    PHP_EVAL_INCLINE($WEBP_CFLAGS)
+    AC_DEFINE(HAVE_LIBWEBP, 1, [ ])
+    AC_DEFINE(HAVE_GD_WEBP, 1, [ ])
   fi
 ])
 
-AC_DEFUN([PHP_GD_PNG],[
-  if test "$PHP_PNG_DIR" != "no"; then
-
-    for i in $PHP_PNG_DIR /usr/local /usr; do
-      test -f $i/include/png.h && GD_PNG_DIR=$i && break
-    done
-
-    if test -z "$GD_PNG_DIR"; then
-      AC_MSG_ERROR([png.h not found.])
-    fi
-
-    if test "$PHP_ZLIB_DIR" = "no"; then
-      AC_MSG_ERROR([PNG support requires ZLIB. Use --with-zlib-dir=<DIR>])
-    fi
-
-    PHP_CHECK_LIBRARY(png,png_write_image,
-    [
-      PHP_ADD_INCLUDE($GD_PNG_DIR/include)
-      PHP_ADD_LIBRARY_WITH_PATH(z, $PHP_ZLIB_DIR/$PHP_LIBDIR, GD_SHARED_LIBADD)
-      PHP_ADD_LIBRARY_WITH_PATH(png, $GD_PNG_DIR/$PHP_LIBDIR, GD_SHARED_LIBADD)
-    ],[
-      AC_MSG_ERROR([Problem with libpng.(a|so) or libz.(a|so). Please check config.log for more information.])
-    ],[
-      -L$PHP_ZLIB_DIR/$PHP_LIBDIR -lz -L$GD_PNG_DIR/$PHP_LIBDIR
-    ])
-
-  else
-    AC_MSG_RESULT([If configure fails try --with-png-dir=<DIR> and --with-zlib-dir=<DIR>])
+AC_DEFUN([PHP_GD_JPEG],[
+  if test "$PHP_JPEG" != "no"; then
+    PKG_CHECK_MODULES([JPEG], [libjpeg])
+    PHP_EVAL_LIBLINE($JPEG_LIBS, GD_SHARED_LIBADD)
+    PHP_EVAL_INCLINE($JPEG_CFLAGS)
+    AC_DEFINE(HAVE_LIBJPEG, 1, [ ])
+    AC_DEFINE(HAVE_GD_JPG, 1, [ ])
   fi
 ])
 
 AC_DEFUN([PHP_GD_XPM],[
-  if test "$PHP_XPM_DIR" != "no"; then
-
-    for i in $PHP_XPM_DIR /usr/local /usr/X11R6 /usr; do
-      test -f $i/include/xpm.h && GD_XPM_DIR=$i && GD_XPM_INC=$i && break
-      test -f $i/include/X11/xpm.h && GD_XPM_DIR=$i && GD_XPM_INC=$i/X11 && break
-    done
-
-    if test -z "$GD_XPM_DIR"; then
-      AC_MSG_ERROR([xpm.h not found.])
-    fi
-
-    PHP_CHECK_LIBRARY(Xpm,XpmFreeXpmImage,
-    [
-      PHP_ADD_INCLUDE($GD_XPM_INC)
-      PHP_ADD_LIBRARY_WITH_PATH(Xpm, $GD_XPM_DIR/$PHP_LIBDIR, GD_SHARED_LIBADD)
-      PHP_ADD_LIBRARY_WITH_PATH(X11, $GD_XPM_DIR/$PHP_LIBDIR, GD_SHARED_LIBADD)
-    ],[
-      AC_MSG_ERROR([Problem with libXpm.(a|so) or libX11.(a|so). Please check config.log for more information.])
-    ],[
-      -L$GD_XPM_DIR/$PHP_LIBDIR -lX11
-    ])
-  else
-    AC_MSG_RESULT(If configure fails try --with-xpm-dir=<DIR>)
+  if test "$PHP_XPM" != "no"; then
+    PKG_CHECK_MODULES([XPM], [xpm])
+    PHP_EVAL_LIBLINE($XPM_LIBS, GD_SHARED_LIBADD)
+    PHP_EVAL_INCLINE($XPM_CFLAGS)
+    AC_DEFINE(HAVE_XPM, 1, [ ])
+    AC_DEFINE(HAVE_GD_XPM, 1, [ ])
   fi
 ])
 
 AC_DEFUN([PHP_GD_FREETYPE2],[
-  if test "$PHP_FREETYPE_DIR" != "no"; then
-
-    for i in $PHP_FREETYPE_DIR /usr/local /usr; do
-      if test -f "$i/bin/freetype-config"; then
-        FREETYPE2_DIR=$i
-        FREETYPE2_CONFIG="$i/bin/freetype-config"
-        break
-      fi
-    done
-
-    if test -z "$FREETYPE2_DIR"; then
-      AC_MSG_ERROR([freetype-config not found.])
-    fi
-
-    FREETYPE2_CFLAGS=`$FREETYPE2_CONFIG --cflags`
-    FREETYPE2_LIBS=`$FREETYPE2_CONFIG --libs`
+  if test "$PHP_FREETYPE" != "no"; then
+    PKG_CHECK_MODULES([FREETYPE2], [freetype2], [FREETYPE2_FOUND=true])
 
     PHP_EVAL_INCLINE($FREETYPE2_CFLAGS)
     PHP_EVAL_LIBLINE($FREETYPE2_LIBS, GD_SHARED_LIBADD)
-    AC_DEFINE(HAVE_LIBFREETYPE,1,[ ])
-    AC_DEFINE(ENABLE_GD_TTF,1,[ ])
-  else
-    AC_MSG_RESULT([If configure fails try --with-freetype-dir=<DIR>])
+    AC_DEFINE(HAVE_LIBFREETYPE, 1, [ ])
+    AC_DEFINE(HAVE_GD_FREETYPE, 1, [ ])
   fi
 ])
 
 AC_DEFUN([PHP_GD_JISX0208],[
   if test "$PHP_GD_JIS_CONV" = "yes"; then
-    USE_GD_JIS_CONV=1
+    AC_DEFINE(USE_GD_JISX0208, 1, [ ])
+    AC_DEFINE(JISX0208, 1, [ ])
   fi
 ])
 
@@ -220,6 +125,7 @@ AC_DEFUN([PHP_GD_CHECK_VERSION],[
   PHP_CHECK_LIBRARY(gd, gdImageCreateFromJpeg,  [AC_DEFINE(HAVE_GD_JPG,              1, [ ])], [], [ $GD_SHARED_LIBADD ])
   PHP_CHECK_LIBRARY(gd, gdImageCreateFromXpm,   [AC_DEFINE(HAVE_GD_XPM,              1, [ ])], [], [ $GD_SHARED_LIBADD ])
   PHP_CHECK_LIBRARY(gd, gdImageCreateFromBmp,   [AC_DEFINE(HAVE_GD_BMP,              1, [ ])], [], [ $GD_SHARED_LIBADD ])
+  PHP_CHECK_LIBRARY(gd, gdImageCreateFromTga,   [AC_DEFINE(HAVE_GD_TGA,              1, [ ])], [], [ $GD_SHARED_LIBADD ])
   PHP_CHECK_LIBRARY(gd, gdImageStringFT,        [AC_DEFINE(HAVE_GD_FREETYPE,         1, [ ])], [], [ $GD_SHARED_LIBADD ])
   PHP_CHECK_LIBRARY(gd, gdVersionString,        [AC_DEFINE(HAVE_GD_LIBVERSION,       1, [ ])], [], [ $GD_SHARED_LIBADD ])
 ])
@@ -228,141 +134,65 @@ dnl
 dnl Main GD configure
 dnl
 
-dnl
-dnl Common for both builtin and external GD
-dnl
 if test "$PHP_GD" != "no"; then
 
-dnl PNG is required by GD library
-  test "$PHP_PNG_DIR" = "no" && PHP_PNG_DIR=yes
-
-dnl Various checks for GD features
-  PHP_GD_ZLIB
-  PHP_GD_WEBP
-  PHP_GD_JPEG
-  PHP_GD_PNG
-  PHP_GD_XPM
-  PHP_GD_FREETYPE2
-  PHP_GD_JISX0208
-fi
-
-if test "$PHP_GD" = "yes"; then
-  GD_MODULE_TYPE=builtin
-  extra_sources="libgd/gd.c libgd/gd_gd.c libgd/gd_gd2.c libgd/gd_io.c libgd/gd_io_dp.c \
-                 libgd/gd_io_file.c libgd/gd_ss.c libgd/gd_io_ss.c libgd/gd_webp.c \
-                 libgd/gd_png.c libgd/gd_jpeg.c libgd/gdxpm.c libgd/gdfontt.c libgd/gdfonts.c \
-                 libgd/gdfontmb.c libgd/gdfontl.c libgd/gdfontg.c libgd/gdtables.c libgd/gdft.c \
-                 libgd/gdcache.c libgd/gdkanji.c libgd/wbmp.c libgd/gd_wbmp.c libgd/gdhelpers.c \
-                 libgd/gd_topal.c libgd/gd_gif_in.c libgd/gd_xbm.c libgd/gd_gif_out.c libgd/gd_security.c \
-                 libgd/gd_filter.c libgd/gd_pixelate.c libgd/gd_rotate.c libgd/gd_color_match.c \
-                 libgd/gd_transform.c libgd/gd_crop.c libgd/gd_interpolation.c libgd/gd_matrix.c \
-                 libgd/gd_bmp.c"
+  if test "$PHP_EXTERNAL_GD" = "no"; then
+    GD_CFLAGS=""
+    extra_sources="libgd/gd.c libgd/gd_gd.c libgd/gd_gd2.c libgd/gd_io.c libgd/gd_io_dp.c \
+                  libgd/gd_io_file.c libgd/gd_ss.c libgd/gd_io_ss.c libgd/gd_webp.c \
+                  libgd/gd_png.c libgd/gd_jpeg.c libgd/gdxpm.c libgd/gdfontt.c libgd/gdfonts.c \
+                  libgd/gdfontmb.c libgd/gdfontl.c libgd/gdfontg.c libgd/gdtables.c libgd/gdft.c \
+                  libgd/gdcache.c libgd/gdkanji.c libgd/wbmp.c libgd/gd_wbmp.c libgd/gdhelpers.c \
+                  libgd/gd_topal.c libgd/gd_gif_in.c libgd/gd_xbm.c libgd/gd_gif_out.c libgd/gd_security.c \
+                  libgd/gd_filter.c libgd/gd_pixelate.c libgd/gd_rotate.c libgd/gd_color_match.c \
+                  libgd/gd_transform.c libgd/gd_crop.c libgd/gd_interpolation.c libgd/gd_matrix.c \
+                  libgd/gd_bmp.c"
 
 dnl check for fabsf and floorf which are available since C99
-  AC_CHECK_FUNCS(fabsf floorf)
+    AC_CHECK_FUNCS(fabsf floorf)
 
 dnl These are always available with bundled library
-  AC_DEFINE(HAVE_GD_BUNDLED,          1, [ ])
-  AC_DEFINE(HAVE_GD_PNG,              1, [ ])
-  AC_DEFINE(HAVE_GD_BMP,              1, [ ])
-  AC_DEFINE(HAVE_GD_CACHE_CREATE,     1, [ ])
-
-dnl Make sure the libgd/ is first in the include path
-  GDLIB_CFLAGS="-DHAVE_LIBPNG"
-
-dnl Depending which libraries were included to PHP configure,
-dnl enable the support in bundled GD library
-
-  if test -n "$GD_WEBP_DIR"; then
-    AC_DEFINE(HAVE_GD_WEBP, 1, [ ])
-    GDLIB_CFLAGS="$GDLIB_CFLAGS -DHAVE_LIBWEBP"
-  fi
-
-  if test -n "$GD_JPEG_DIR"; then
-    AC_DEFINE(HAVE_GD_JPG, 1, [ ])
-    GDLIB_CFLAGS="$GDLIB_CFLAGS -DHAVE_LIBJPEG"
-  fi
-
-  if test -n "$GD_XPM_DIR"; then
-    AC_DEFINE(HAVE_GD_XPM, 1, [ ])
-    GDLIB_CFLAGS="$GDLIB_CFLAGS -DHAVE_XPM"
-  fi
-
-  if test -n "$FREETYPE2_DIR"; then
-    AC_DEFINE(HAVE_GD_FREETYPE,   1, [ ])
-    AC_DEFINE(ENABLE_GD_TTF, 1, [ ])
-    GDLIB_CFLAGS="$GDLIB_CFLAGS -DHAVE_LIBFREETYPE -DENABLE_GD_TTF"
-  fi
-
-  if test -n "$USE_GD_JIS_CONV"; then
-    AC_DEFINE(USE_GD_JISX0208, 1, [ ])
-    GDLIB_CFLAGS="$GDLIB_CFLAGS -DJISX0208"
-  fi
-
-else
-
- if test "$PHP_GD" != "no"; then
-  GD_MODULE_TYPE=external
-  extra_sources="gd_compat.c"
+    AC_DEFINE(HAVE_GD_BUNDLED,          1, [ ])
+    AC_DEFINE(HAVE_GD_PNG,              1, [ ])
+    AC_DEFINE(HAVE_GD_BMP,              1, [ ])
+    AC_DEFINE(HAVE_GD_TGA,              1, [ ])
 
 dnl Various checks for GD features
-  PHP_GD_ZLIB
-  PHP_GD_WEBP
-  PHP_GD_JPEG
-  PHP_GD_PNG
-  PHP_GD_XPM
-  PHP_GD_FREETYPE2
-
-dnl Header path
-  for i in include/gd include/gd2 include gd ""; do
-    test -f "$PHP_GD/$i/gd.h" && GD_INCLUDE="$PHP_GD/$i"
-  done
-
-  if test -z "$GD_INCLUDE"; then
-    AC_MSG_ERROR([Unable to find gd.h anywhere under $PHP_GD])
-  fi
-
-dnl Library path
-
-  PHP_CHECK_LIBRARY(gd, gdSetErrorMethod,
-  [
-    PHP_ADD_LIBRARY_WITH_PATH(gd, $PHP_GD/$PHP_LIBDIR, GD_SHARED_LIBADD)
-    AC_DEFINE(HAVE_LIBGD, 1, [ ])
-  ],[
-    AC_MSG_ERROR([Unable to find libgd.(a|so) >= 2.1.0 anywhere under $PHP_GD])
-  ],[
-    -L$PHP_GD/$PHP_LIBDIR
-  ])
-  PHP_GD_CHECK_VERSION
-
-  PHP_EXPAND_PATH($GD_INCLUDE, GD_INCLUDE)
- fi
-fi
-
-dnl
-dnl Common for both builtin and external GD
-dnl
-if test "$PHP_GD" != "no"; then
-  PHP_NEW_EXTENSION(gd, gd.c $extra_sources, $ext_shared,, \\$(GDLIB_CFLAGS))
-
-  if test "$GD_MODULE_TYPE" = "builtin"; then
+    PHP_GD_ZLIB
+    PHP_GD_PNG
+    PHP_GD_WEBP
+    PHP_GD_JPEG
+    PHP_GD_XPM
+    PHP_GD_FREETYPE2
+    PHP_GD_JISX0208
+
+    PHP_NEW_EXTENSION(gd, gd.c $extra_sources, $ext_shared,, \\$(GD_CFLAGS))
     PHP_ADD_BUILD_DIR($ext_builddir/libgd)
-    GDLIB_CFLAGS="-I$ext_srcdir/libgd $GDLIB_CFLAGS"
+    GD_CFLAGS="-I$ext_srcdir/libgd $GD_CFLAGS"
     GD_HEADER_DIRS="ext/gd/ ext/gd/libgd/"
 
     PHP_TEST_BUILD(foobar, [], [
       AC_MSG_ERROR([GD build test failed. Please check the config.log for details.])
     ], [ $GD_SHARED_LIBADD ], [char foobar () {}])
+
   else
+    extra_sources="gd_compat.c"
+    PKG_CHECK_MODULES([GDLIB], [gdlib >= 2.1.0])
+    PHP_EVAL_LIBLINE($GDLIB_LIBS, GD_SHARED_LIBADD)
+    PHP_EVAL_INCLINE($GDLIB_CFLAGS)
+    AC_DEFINE(HAVE_LIBGD, 1, [ ])
+    PHP_GD_CHECK_VERSION
+
+    PHP_NEW_EXTENSION(gd, gd.c $extra_sources, $ext_shared)
     GD_HEADER_DIRS="ext/gd/"
-    GDLIB_CFLAGS="-I$GD_INCLUDE $GDLIB_CFLAGS"
-    PHP_ADD_INCLUDE($GD_INCLUDE)
     PHP_CHECK_LIBRARY(gd, gdImageCreate, [], [
       AC_MSG_ERROR([GD build test failed. Please check the config.log for details.])
     ], [ $GD_SHARED_LIBADD ])
   fi
 
   PHP_INSTALL_HEADERS([$GD_HEADER_DIRS])
+  PHP_SUBST(GD_CFLAGS)
   PHP_SUBST(GDLIB_CFLAGS)
+  PHP_SUBST(GDLIB_LIBS)
   PHP_SUBST(GD_SHARED_LIBADD)
 fi
